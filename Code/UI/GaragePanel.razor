@inherits Panel
@namespace SBRacer.Ui

<root>
	<div class="scene" @ref=ScenePanelParent></div>
	<div class="money">
		$0
	</div>
	<div class="platform-rotation">
		@{
			var rotationDirection = (int)Input.AnalogMove.y;
			var rotatingLeft = rotationDirection == 1;
			var rotatingRight = rotationDirection == -1;
		}
		<div class="direction-prompt @( rotatingLeft ? "input-down" : "" )">
			<div class="input-direction back">forward</div>
			<Image class="input-prompt" Texture="@Input.GetGlyph( "left", InputGlyphSize.Small, GlyphStyle.Knockout )"/>
		</div>
		<div class="title">ROTATE</div>
		<div class="direction-prompt @( rotatingRight ? "input-down" : "" )">
			<Image class="input-prompt" Texture="@Input.GetGlyph( "right", InputGlyphSize.Small, GlyphStyle.Knockout )"/>
			<div class="input-direction">forward</div>
		</div>
	</div>
	<div class="item-list-container">
		<div class="container-title">UPGRADES</div>
		<UpgradeContainer class="item-list"></UpgradeContainer>
	</div>
</root>

@code {
	private static GaragePanel Instance { get; set; }
	
	private Panel ScenePanelParent { get; set; }
	private ScenePanel ScenePanel { get; set; }
	private bool Visible { get; set; }

	public GaragePanel()
	{
		Instance = this;
	}

	protected override void OnAfterTreeRender( bool firstTime )
	{
		base.OnAfterTreeRender(firstTime);
		
		ScenePanel ??= new ScenePanel( "scenes/car_garage.scene" );
		ScenePanelParent.AddChild( ScenePanel );
		
		BindClass( "visible", () => Visible );
	}
	
	protected override int BuildHash()
	{
		return HashCode.Combine( Player.Local?.Money, Input.AnalogMove.y );
	}

	public static void Show()
	{
		Instance.Visible = true;
	}

	public static async Task ShowAfter(float seconds)
	{
		await GameTask.DelayRealtimeSeconds( seconds );

		Show();
	}
}
